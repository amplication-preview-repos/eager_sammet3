/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HouseService } from "../house.service";
import { HouseCreateInput } from "./HouseCreateInput";
import { House } from "./House";
import { HouseFindManyArgs } from "./HouseFindManyArgs";
import { HouseWhereUniqueInput } from "./HouseWhereUniqueInput";
import { HouseUpdateInput } from "./HouseUpdateInput";
import { DeviceFindManyArgs } from "../../device/base/DeviceFindManyArgs";
import { Device } from "../../device/base/Device";
import { DeviceWhereUniqueInput } from "../../device/base/DeviceWhereUniqueInput";

export class HouseControllerBase {
  constructor(protected readonly service: HouseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: House })
  async createHouse(@common.Body() data: HouseCreateInput): Promise<House> {
    return await this.service.createHouse({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        location: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [House] })
  @ApiNestedQuery(HouseFindManyArgs)
  async houses(@common.Req() request: Request): Promise<House[]> {
    const args = plainToClass(HouseFindManyArgs, request.query);
    return this.service.houses({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        location: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: House })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async house(
    @common.Param() params: HouseWhereUniqueInput
  ): Promise<House | null> {
    const result = await this.service.house({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        location: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: House })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHouse(
    @common.Param() params: HouseWhereUniqueInput,
    @common.Body() data: HouseUpdateInput
  ): Promise<House | null> {
    try {
      return await this.service.updateHouse({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          location: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: House })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHouse(
    @common.Param() params: HouseWhereUniqueInput
  ): Promise<House | null> {
    try {
      return await this.service.deleteHouse({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          location: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/devices")
  @ApiNestedQuery(DeviceFindManyArgs)
  async findDevices(
    @common.Req() request: Request,
    @common.Param() params: HouseWhereUniqueInput
  ): Promise<Device[]> {
    const query = plainToClass(DeviceFindManyArgs, request.query);
    const results = await this.service.findDevices(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        name: true,
        properties: true,

        house: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/devices")
  async connectDevices(
    @common.Param() params: HouseWhereUniqueInput,
    @common.Body() body: DeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      devices: {
        connect: body,
      },
    };
    await this.service.updateHouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/devices")
  async updateDevices(
    @common.Param() params: HouseWhereUniqueInput,
    @common.Body() body: DeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      devices: {
        set: body,
      },
    };
    await this.service.updateHouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/devices")
  async disconnectDevices(
    @common.Param() params: HouseWhereUniqueInput,
    @common.Body() body: DeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      devices: {
        disconnect: body,
      },
    };
    await this.service.updateHouse({
      where: params,
      data,
      select: { id: true },
    });
  }
}
